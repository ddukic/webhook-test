{"startedTestsAt":"2022-05-25T08:13:45.029Z","endedTestsAt":"2022-05-25T08:14:08.743Z","totalDuration":23714,"totalSuites":2,"totalTests":6,"totalFailed":0,"totalPassed":6,"totalPending":0,"totalSkipped":0,"runs":[{"stats":{"suites":2,"tests":6,"passes":6,"pending":0,"skipped":0,"failures":0,"duration":23714,"startedAt":"2022-05-25T08:13:45.029Z","endedAt":"2022-05-25T08:14:08.743Z"},"reporter":"spec","reporterStats":{"suites":2,"tests":6,"passes":6,"pending":0,"failures":0,"start":"2022-05-25T08:13:45.034Z","end":"2022-05-25T08:14:08.756Z","duration":23722},"hooks":[{"hookName":"before each","title":["\"before each\" hook"],"body":"() => {\n    // Cypress starts out with a blank slate for each test\n    // so we must tell it to visit our website with the `cy.visit()` command.\n    // Since we want to visit the same URL at the start of all our tests,\n    // we include it in our beforeEach function so that it runs before each test\n    cy.visit('https://example.cypress.io/todo');\n  }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"() => {\n      // We'll take the command we used above to check off an element\n      // Since we want to perform multiple tests that start with checking\n      // one element, we put it in the beforeEach hook\n      // so that it runs at the start of every test.\n      cy.contains('Pay electric bill').parent().find('input[type=checkbox]').check();\n    }"}],"tests":[{"title":["example to-do app","displays two todo items by default"],"state":"passed","body":"() => {\n    // We use the `cy.get()` command to get all elements that match the selector.\n    // Then, we use `should` to assert that there are two matched items,\n    // which are the two default items.\n    cy.get('.todo-list li').should('have.length', 2); // We can go even further and check that the default todos each contain\n    // the correct text. We use the `first` and `last` functions\n    // to get just the first and last matched elements individually,\n    // and then perform an assertion with `should`.\n\n    cy.get('.todo-list li').first().should('have.text', 'Pay electric bill');\n    cy.get('.todo-list li').last().should('have.text', 'Walk the dog');\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":4813,"duration":5264,"startedAt":"2022-05-25T08:13:47.410Z","screenshots":[]}]},{"title":["example to-do app","can add new todo items"],"state":"passed","body":"() => {\n    // We'll store our item text in a variable so we can reuse it\n    const newItem = 'Feed the cat'; // Let's get the input element and use the `type` command to\n    // input our new list item. After typing the content of our item,\n    // we need to type the enter key as well in order to submit the input.\n    // This input has a data-test attribute so we'll use that to select the\n    // element in accordance with best practices:\n    // https://on.cypress.io/selecting-elements\n\n    cy.get('[data-test=new-todo]').type(`${newItem}{enter}`); // Now that we've typed our new item, let's check that it actually was added to the list.\n    // Since it's the newest item, it should exist as the last element in the list.\n    // In addition, with the two default items, we should have a total of 3 elements in the list.\n    // Since assertions yield the element that was asserted on,\n    // we can chain both of these assertions together into a single statement.\n\n    cy.get('.todo-list li').should('have.length', 3).last().should('have.text', newItem);\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":10083,"duration":4308,"startedAt":"2022-05-25T08:13:52.680Z","screenshots":[]}]},{"title":["example to-do app","can check off an item as completed"],"state":"passed","body":"() => {\n    // In addition to using the `get` command to get an element by selector,\n    // we can also use the `contains` command to get an element by its contents.\n    // However, this will yield the <label>, which is lowest-level element that contains the text.\n    // In order to check the item, we'll find the <input> element for this <label>\n    // by traversing up the dom to the parent element. From there, we can `find`\n    // the child checkbox <input> element and use the `check` command to check it.\n    cy.contains('Pay electric bill').parent().find('input[type=checkbox]').check(); // Now that we've checked the button, we can go ahead and make sure\n    // that the list element is now marked as completed.\n    // Again we'll use `contains` to find the <label> element and then use the `parents` command\n    // to traverse multiple levels up the dom until we find the corresponding <li> element.\n    // Once we get that element, we can assert that it has the completed class.\n\n    cy.contains('Pay electric bill').parents('li').should('have.class', 'completed');\n  }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":14395,"duration":750,"startedAt":"2022-05-25T08:13:56.992Z","screenshots":[]}]},{"title":["example to-do app","with a checked task","can filter for uncompleted tasks"],"state":"passed","body":"() => {\n      // We'll click on the \"active\" button in order to\n      // display only incomplete items\n      cy.contains('Active').click(); // After filtering, we can assert that there is only the one\n      // incomplete item in the list.\n\n      cy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Walk the dog'); // For good measure, let's also assert that the task we checked off\n      // does not exist on the page.\n\n      cy.contains('Pay electric bill').should('not.exist');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":15147,"duration":1898,"startedAt":"2022-05-25T08:13:57.744Z","screenshots":[]}]},{"title":["example to-do app","with a checked task","can filter for completed tasks"],"state":"passed","body":"() => {\n      // We can perform similar steps as the test above to ensure\n      // that only completed tasks are shown\n      cy.contains('Completed').click();\n      cy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Pay electric bill');\n      cy.contains('Walk the dog').should('not.exist');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":17048,"duration":807,"startedAt":"2022-05-25T08:13:59.645Z","screenshots":[]}]},{"title":["example to-do app","with a checked task","can delete all completed tasks"],"state":"passed","body":"() => {\n      // First, let's click the \"Clear completed\" button\n      // `contains` is actually serving two purposes here.\n      // First, it's ensuring that the button exists within the dom.\n      // This button only appears when at least one task is checked\n      // so this command is implicitly verifying that it does exist.\n      // Second, it selects the button so we can click it.\n      cy.contains('Clear completed').click(); // Then we can make sure that there is only one element\n      // in the list and our element does not exist\n\n      cy.get('.todo-list li').should('have.length', 1).should('not.have.text', 'Pay electric bill'); // Finally, make sure that the clear button no longer exists.\n\n      cy.contains('Clear completed').should('not.exist');\n    }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":17856,"duration":8287,"startedAt":"2022-05-25T08:14:00.453Z","screenshots":[]}]}],"error":null,"video":"/home/dane/OtherProjects/Dane/webhookTest/webhook/cypress/videos/1-getting-started/todo.spec.js.mp4","spec":{"name":"1-getting-started/todo.spec.js","relative":"cypress/integration/1-getting-started/todo.spec.js","absolute":"/home/dane/OtherProjects/Dane/webhookTest/webhook/cypress/integration/1-getting-started/todo.spec.js","specType":"integration"},"shouldUploadVideo":true}],"browserPath":"google-chrome","browserName":"chrome","browserVersion":"101.0.4951.64","osName":"linux","osVersion":"Ubuntu - 20.04","cypressVersion":"9.7.0","config":{"projectRoot":"/home/dane/OtherProjects/Dane/webhookTest/webhook","projectName":"webhook","rawJson":{"envFile":{},"projectRoot":"/home/dane/OtherProjects/Dane/webhookTest/webhook","projectName":"webhook"},"configFile":"cypress.json","morgan":false,"isTextTerminal":true,"socketId":"wtbtd","report":true,"browsers":[{"name":"chrome","family":"chromium","channel":"stable","displayName":"Chrome","version":"101.0.4951.64","path":"google-chrome","minSupportedVersion":64,"majorVersion":101},{"name":"firefox","family":"firefox","channel":"stable","displayName":"Firefox","version":"100.0.2","path":"firefox","minSupportedVersion":86,"majorVersion":100},{"name":"electron","channel":"stable","family":"chromium","displayName":"Electron","version":"100.0.4896.75","path":"","majorVersion":100,"info":"Electron is the default browser that comes with Cypress. This is the default browser that runs in headless mode. Selecting this browser is useful when debugging. The version number indicates the underlying Chromium version that Electron uses."}],"animationDistanceThreshold":5,"baseUrl":null,"blockHosts":null,"chromeWebSecurity":true,"clientCertificates":[],"component":{},"componentFolder":"/home/dane/OtherProjects/Dane/webhookTest/webhook/cypress/component","defaultCommandTimeout":4000,"downloadsFolder":"/home/dane/OtherProjects/Dane/webhookTest/webhook/cypress/downloads","e2e":{},"env":{},"execTimeout":60000,"experimentalFetchPolyfill":false,"experimentalInteractiveRunEvents":false,"experimentalSessionAndOrigin":false,"experimentalSourceRewriting":false,"experimentalStudio":false,"fileServerFolder":"/home/dane/OtherProjects/Dane/webhookTest/webhook","fixturesFolder":"/home/dane/OtherProjects/Dane/webhookTest/webhook/cypress/fixtures","ignoreTestFiles":"*.hot-update.js","includeShadowDom":false,"integrationFolder":"/home/dane/OtherProjects/Dane/webhookTest/webhook/cypress/integration","keystrokeDelay":0,"modifyObstructiveCode":true,"numTestsKeptInMemory":0,"pageLoadTimeout":60000,"pluginsFile":"/home/dane/OtherProjects/Dane/webhookTest/webhook/cypress/plugins/index.js","port":43321,"projectId":null,"redirectionLimit":20,"reporter":"spec","reporterOptions":null,"requestTimeout":5000,"resolvedNodePath":"/home/dane/.nvm/versions/node/v16.14.2/bin/node","resolvedNodeVersion":"16.14.2","responseTimeout":30000,"retries":{"runMode":0,"openMode":0},"screenshotOnRunFailure":true,"screenshotsFolder":"/home/dane/OtherProjects/Dane/webhookTest/webhook/cypress/screenshots","slowTestThreshold":10000,"scrollBehavior":"top","supportFile":"/home/dane/OtherProjects/Dane/webhookTest/webhook/cypress/support/index.js","supportFolder":"/home/dane/OtherProjects/Dane/webhookTest/webhook/cypress/support","taskTimeout":60000,"testFiles":"**/*.*","trashAssetsBeforeRuns":true,"userAgent":null,"video":true,"videoCompression":32,"videosFolder":"/home/dane/OtherProjects/Dane/webhookTest/webhook/cypress/videos","videoUploadOnPasses":true,"viewportHeight":660,"viewportWidth":1000,"waitForAnimations":true,"watchForFileChanges":false,"autoOpen":false,"clientRoute":"/__/","devServerPublicPathRoute":"/__cypress/src","hosts":null,"isInteractive":true,"namespace":"__cypress","reporterRoute":"/__cypress/reporter","socketIoCookie":"__socket.io","socketIoRoute":"/__socket.io","xhrRoute":"/xhrs/","cypressEnv":"production","resolved":{"animationDistanceThreshold":{"value":5,"from":"default"},"baseUrl":{"value":null,"from":"default"},"blockHosts":{"value":null,"from":"default"},"chromeWebSecurity":{"value":true,"from":"default"},"clientCertificates":{"value":[],"from":"default"},"component":{"value":{},"from":"default"},"componentFolder":{"value":"cypress/component","from":"default"},"defaultCommandTimeout":{"value":4000,"from":"default"},"downloadsFolder":{"value":"cypress/downloads","from":"default"},"e2e":{"value":{},"from":"default"},"env":{},"execTimeout":{"value":60000,"from":"default"},"experimentalFetchPolyfill":{"value":false,"from":"default"},"experimentalInteractiveRunEvents":{"value":false,"from":"default"},"experimentalSessionAndOrigin":{"value":false,"from":"default"},"experimentalSourceRewriting":{"value":false,"from":"default"},"experimentalStudio":{"value":false,"from":"default"},"fileServerFolder":{"value":"","from":"default"},"fixturesFolder":{"value":"cypress/fixtures","from":"default"},"ignoreTestFiles":{"value":"*.hot-update.js","from":"default"},"includeShadowDom":{"value":false,"from":"default"},"integrationFolder":{"value":"cypress/integration","from":"default"},"keystrokeDelay":{"value":0,"from":"default"},"modifyObstructiveCode":{"value":true,"from":"default"},"numTestsKeptInMemory":{"value":0,"from":"config"},"pageLoadTimeout":{"value":60000,"from":"default"},"pluginsFile":{"value":"cypress/plugins","from":"default"},"port":{"value":null,"from":"default"},"projectId":{"value":null,"from":"default"},"redirectionLimit":{"value":20,"from":"default"},"reporter":{"value":"spec","from":"default"},"reporterOptions":{"value":null,"from":"default"},"requestTimeout":{"value":5000,"from":"default"},"resolvedNodePath":{"value":null,"from":"default"},"resolvedNodeVersion":{"value":null,"from":"default"},"responseTimeout":{"value":30000,"from":"default"},"retries":{"value":{"runMode":0,"openMode":0},"from":"default"},"screenshotOnRunFailure":{"value":true,"from":"default"},"screenshotsFolder":{"value":"cypress/screenshots","from":"default"},"slowTestThreshold":{"value":10000,"from":"default"},"scrollBehavior":{"value":"top","from":"default"},"supportFile":{"value":"cypress/support","from":"default"},"supportFolder":{"value":false,"from":"default"},"taskTimeout":{"value":60000,"from":"default"},"testFiles":{"value":"**/*.*","from":"default"},"trashAssetsBeforeRuns":{"value":true,"from":"default"},"userAgent":{"value":null,"from":"default"},"video":{"value":true,"from":"default"},"videoCompression":{"value":32,"from":"default"},"videosFolder":{"value":"cypress/videos","from":"default"},"videoUploadOnPasses":{"value":true,"from":"default"},"viewportHeight":{"value":660,"from":"default"},"viewportWidth":{"value":1000,"from":"default"},"waitForAnimations":{"value":true,"from":"default"},"watchForFileChanges":{"value":false,"from":"config"},"browsers":{"value":[{"name":"chrome","family":"chromium","channel":"stable","displayName":"Chrome","version":"101.0.4951.64","path":"google-chrome","minSupportedVersion":64,"majorVersion":101,"isHeadless":true,"isHeaded":false},{"name":"firefox","family":"firefox","channel":"stable","displayName":"Firefox","version":"100.0.2","path":"firefox","minSupportedVersion":86,"majorVersion":100},{"name":"electron","channel":"stable","family":"chromium","displayName":"Electron","version":"100.0.4896.75","path":"","majorVersion":100,"info":"Electron is the default browser that comes with Cypress. This is the default browser that runs in headless mode. Selecting this browser is useful when debugging. The version number indicates the underlying Chromium version that Electron uses."}],"from":"default"},"hosts":{"value":null,"from":"default"},"isInteractive":{"value":true,"from":"default"}},"parentTestsFolder":"/home/dane/OtherProjects/Dane/webhookTest/webhook/cypress","parentTestsFolderDisplay":"webhook/cypress","scaffoldedFiles":[{"name":"cypress","children":[{"name":"integration","children":[{"name":"1-getting-started","children":[{"name":"todo.spec.js"}]},{"name":"2-advanced-examples","children":[{"name":"actions.spec.js"},{"name":"aliasing.spec.js"},{"name":"assertions.spec.js"},{"name":"connectors.spec.js"},{"name":"cookies.spec.js"},{"name":"cypress_api.spec.js"},{"name":"files.spec.js"},{"name":"local_storage.spec.js"},{"name":"location.spec.js"},{"name":"misc.spec.js"},{"name":"navigation.spec.js"},{"name":"network_requests.spec.js"},{"name":"querying.spec.js"},{"name":"spies_stubs_clocks.spec.js"},{"name":"traversal.spec.js"},{"name":"utilities.spec.js"},{"name":"viewport.spec.js"},{"name":"waiting.spec.js"},{"name":"window.spec.js"}]}]},{"name":"fixtures","children":[{"name":"example.json"}]},{"name":"support","children":[{"name":"commands.js"},{"name":"index.js"}]},{"name":"plugins","children":[{"name":"index.js"}]}]}],"proxyUrl":"http://localhost:43321","browserUrl":"http://localhost:43321/__/","reporterUrl":"http://localhost:43321/__cypress/reporter","xhrUrl":"__cypress/xhrs/","proxyServer":"http://localhost:43321","state":{}},"status":"finished"}
